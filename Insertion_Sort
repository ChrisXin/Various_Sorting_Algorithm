template <typename Type>
void insertion_sort( Type *const array, int const n ) {
    
    // This loop starts from the front to sort
    for ( int k = 1; k < n; ++k ) {
    
    // This loop starts from next element of the previous sorted list 
    // (in order to insert this element into an approriate location)
        for ( int j = k; j > 0; --j ) {
            if ( array[j - 1] > array[j] ) {
                std::swap( array[j - 1], array[j] );
            } else {
                // As soon as we don't need to swap, the (k + 1)st
               // is in the correct location
               break;
            }
        }
    }
}


// swapping is expensive: (temporarily assign the new entry)
template <typename Type>
void insertion( Type *const array, int const n ) {
    for ( int k = 1; k < n; ++k ) {
        Type tmp = array[k];

        for ( int j = k; k > 0; --j ) {
            if ( array[j - 1] > tmp ) {
                array[j] = array[j - 1];
            } else {
                 array[j] = tmp;
                 break;
            }
        }

        if ( array[0] > tmp ) {
            array[0] = tmp;  // only executed if tmp < array[0]
        }
    }
}


